openapi: 3.0.4

info:
  title: ArgentBank - Transactions API (Phase 2)
  description: |
    Documentation de proposition d'API pour la **phase phase 2 : Transactions**.
    
    Objectifs: 
    - Visualiser toutes les transactions du **mois en cours**, group√©es par compte.
    - Voir le **D√©tails** d'une transaction.
    - **Ajouter / modifier / supprimer** des informations sur une transaction.  
  version: '1.0.0'

servers: # Liste des serveurs disponibles et o√π l'API tourne
  - url: http://localhost:3001/api/v1

# Authentification: toutes les routes exigent un Bearer JWT (token) 'fake.token.demo'
security:
  - BearerAuth: []

tags: # Cat√©gories d'endpoints
- name: Transactions
  description: Op√©rations li√©es aux transactions des comptes

paths: # Ici on d√©finit les diff√©rentes routes (endpoints du backend)

  # 1) Voir toutes les transactions du mois
  /transactions: # Route principale pour les transactions de l'appli
    get: # M√©thode GET ‚Üí sert √† LIRE et √† OBTENIR les infos

      tags:
        - Transactions
      summary: Lister les transactions du mois (group√©es par compte)
      description: Retourne les transactions du mois demand√© (ou courant si pas pr√©cis√©).
      parameters:
        - in: query
          name: month
          description: Mois au format YYYY-MM
          required: false
          schema:
            type: string
            example: "2025-09"
      responses:
        "200":
          description: Transactions r√©cup√©r√©es avec succ√®s
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/AccountsTransactionsResponse"
        "400": { description: Le param√®tre fourni est invalide }
        "401": { description: Authentification requise ou token invalide }
        "404": { description: Aucune transaction trouv√©e pour ce mois }
        "500": { description: Erreur interne du serveur }

  # 2) Voir le d√©tail d‚Äôune transaction
  /transactions/{id}: # URL ‚Üí /transactions/666
    get:
      tags:
        - Transactions
      summary: D√©tail d'une transaction
      description: Retourne une transaction pr√©cise par son ID
      parameters:
        - in: path
          name: id
          description: ID de la transaction
          required: true
          schema: 
            type: string
            example: "tr_666"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
        "400": { description: L‚Äôidentifiant fourni est invalide }
        "401": { description: Authentification requise ou token invalide }
        "404": { description: La transaction demand√©e est introuvable }
        "500": { description: Erreur interne du serveur }
        
  # 3) Ajouter / modifier / supprimer des infos sur une transaction
  /transactions/{id}/info:  # URL ‚Üí /transactions/666/info
    
    post: # ‚ûï Ajouter
      tags: 
        - Transactions
      summary: Ajouter des infos (category/note)
      description: Ajoute category et/ou note √† une transaction
      parameters:
        - in: path
          name: id
          description: ID de la transaction
          required: true
          schema:
            type: string
      requestBody: # Donn√©es envoy√©es
        required: true
        description: Donn√©es √† ajouter
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionInfo"
      responses:
        "201":
          description: Cr√©e # üìù Cr√©√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
        "400": { description: Les donn√©es fournies sont invalides }
        "401": { description: Authentification requise ou token invalide }
        "404": { description: Transaction introuvable pour l‚ÄôID donn√© }
        "500": { description: Erreur interne du serveur }

    patch:  # ‚úèÔ∏è Modifier √©l√©ment
      tags:
        - Transactions
      summary: Modifier des infos (category/note)
      description: Mettre √† jour category et/ou note d‚Äôune transaction
      parameters:
        - in: path
          name: id
          description: ID de la transaction 
          required: true
          schema: 
            type: string
      requestBody: # Donn√©es envoy√©es
        required: true
        description: Donn√©es √† modifier
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
        "400": { description: Les donn√©es fournies sont invalides }
        "401": { description: Authentification requise ou token invalide }
        "404": { description: Transaction introuvable pour l‚ÄôID donn√© }
        "500": { description: Erreur interne du serveur }

    delete: # üóëÔ∏è Supprimer
      tags:
        - Transactions
      summary: Supprimer des informations (category/note)
      description: Supprime category et/ou note (remet null)
      parameters:
        - in: path
          name: id
          description: ID de la transaction
          required: true
          schema:
            type: string
            example: "Transaction mise √† jour avec succ√®s (aucun contenu)"
      responses:
        "204": { description: Informations supprim√©es avec succ√®s (aucun contenu retourn√©) }
        "400": { description: L‚Äôidentifiant fourni est invalide }
        "401": { description: Authentification requise ou token invalide }
        "404": { description: Transaction introuvable pour l‚ÄôID donn√© }
        "500": { description: Erreur interne du serveur }

components:

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    
    # Une transaction (ligne de relev√©)
    Transaction:
      type: object
      properties:
        id: { type: string, example: "tr_666" }
        date: { type: string, format: date-time, example: "2025-09-01T12:15:30Z" }
        description: { type: string, example: "Golden Sun Bakery" }
        amount: { type: number, example: 20.00 }
        balance: { type: number, description: Solde apr√®s op√©ration, example: 2097.79 }
        category: { type: string, example: "Food" }
        note: { type: string, example: "Resto du Week-end" }

    # Les infos que l‚Äôutilisateur peut ajouter/modifier
    TransactionInfo:
      type: object
      properties:
        category: { type: string, example: "Food" }
        note: { type: string, example: "Resto du Week-end" }

    # Les transactions regroup√©es par compte
    AccountTransactions:
      type: object
      properties:
        accountId: { type: string, example: "acc_987"}
        transactions:
          type: array
          items:
            $ref: "#/components/schemas/Transaction"

    # R√©ponse quand on liste toutes les transactions
    AccountsTransactionsResponse:
      type: object
      properties:
        status: { type: integer, example: 200 }   # 200, 400, ...
        message: { type: string, example: "OK" } # "OK", "Error" , ...
        body:
          type: object
          properties:
            accounts:
              type: array
              items:
                $ref: "#/components/schemas/AccountTransactions"

    # R√©ponse quand on demande le d√©tail d‚Äôune transaction
    TransactionResponse:
      type: object
      properties:
        status: { type: integer, example: 200 }
        message: { type: string, example: "OK" }
        body:
          $ref: "#/components/schemas/Transaction"



        
